plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

String buildNumber = 'git rev-list --count HEAD'.execute().text.trim();

group = 'com.github.mouse0w0'
version = "0.1.0.${buildNumber}-SNAPSHOT"
mainClassName = 'com.github.mouse0w0.peach.Peach'
compileJava.options.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://jitpack.io' }
    mavenCentral()
    mavenLocal()
}

dependencies {
    api 'com.google.guava:guava:31.1-jre'
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'org.apache.commons:commons-collections4:4.4'
    api 'commons-io:commons-io:2.11.0'
    api 'org.ow2.asm:asm-commons:9.3'
    api 'com.google.code.gson:gson:2.9.0'
    api 'org.freemarker:freemarker:2.3.31'
    api 'it.unimi.dsi:fastutil:8.5.8'
    api('org.dom4j:dom4j:2.1.3') {
        exclude module: 'jaxb-api'
        exclude module: 'stax-api'
        exclude module: 'jaxen'
        exclude module: 'xsdlib'
        exclude module: 'pull-parser'
        exclude module: 'xpp3'
    }

    api 'com.github.mouse0w0:version:1.4.0'
    api 'com.github.mouse0w0:i18n:1.3.1'
    api 'com.github.mouse0w0:gridview:11.0.0'

    api 'com.github.sps.junidecode:junidecode:0.3'
    api 'org.controlsfx:controlsfx:11.1.1'

    api 'org.slf4j:slf4j-api:1.7.36'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.36'
}

javafx {
    version = '18.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

jar {
    String gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
    String gitVersion = 'git rev-parse --short HEAD'.execute().text.trim()
    manifest.attributes([
            "Main-Class"              : mainClassName,
            "Implementation-Title"    : rootProject.name,
            "Implementation-Version"  : project.version,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Git-Branch"              : gitBranch,
            "Git-Version"             : gitVersion,
            "Git-BuildNumber"         : buildNumber
    ])
}

application {
    executableDir = ''
}

distributions {
    main {
        contents {
            from('content-pack') { into 'content-pack' }
            from('license') { into 'license' }
            from('executable')
            from('CHANGELOG.md')
        }
    }
}
